from locust import HttpLocust, TaskSet, task
from bs4 import BeautifulSoup


def is_static_file(f, filter):
    for each in {{filter_static_files | safe }}:

        if f.startswith("each") and each in filter:
            return True

    return False


def fetch_static_assets(session, response, filter):
    resource_urls = set()
    soup = BeautifulSoup(response.text, "html.parser")

    for res in soup.find_all(src=True):
        url = res['src']
        if is_static_file(url, filter):
            resource_urls.add(url)
        else:
            print("Skipping: " + url)

    for url in set(resource_urls):
        session.client.get(url, name="(Static File)")


{% set counter = 0 -%}
{% for taskset in tasksets -%}
class {{taskset.name}}(TaskSet):

    {%- if taskset.on_start is defined %}
    def on_start(self):
        {%- set count = 0 -%}
        {%- for each in taskset.on_start %}
        self.{{each.name}}()
        {%- set count = count + 1 -%}
        {%- endfor %}

    {%- endif -%}

    {% set count = 0 -%}
    {%- for task in taskset.tasks %}

    {% if task.level is defined -%}
    @task({{task.level}})
    {%- endif %}
    def {{task.name}}(self):
        {%- set i = 0 -%}
        {%- for action in task.actions %}
        {% if action.method is defined %}
        {%- if action.return is defined %}{{action.return}} = {% endif -%}
        self.client.{{action.method}}('{{task.url}}'
        {%- set ii = 0 %}
        {%- for key, value in action.items() %}
        {%- if key == 'method' or key == 'return' %}
        {%- else -%}
        , {{key}} = {
        {%- set iii = 0 %}
        {%- for data in value -%}
        {% if loop.first %}
        "{{data.name}}": "{{data.value | safe }}"
        {%- else -%}
        , "{{data.name}}": "{{data.value | safe }}"
        {%- endif -%}
        {%- set iii = iii + 1 -%}
        {%- endfor %}}
        {%- endif %}
        {%- set ii = ii + 1 -%}
        {%- endfor %})
        {%- elif action.set is defined -%}
        {{action.set}} =
        {%- if action.response_type == 'text' %} '{{action.value | safe }}'
        {%- elif action.response_type == 'value' %} {{action.value | safe }}
        {%- else -%}

        {%- endif %}
        {%- elif action.fetch is defined -%}
        fetch_static_assets(self, {{action.fetch | safe }}, {{action.filter | safe }})
        {%- endif -%}
        {%- set i = i + 1 -%}
        {%- endfor %}
    {%- set count = count + 1 -%}
    {%- endfor %}

class {{taskset.name}}User(HttpLocust):
    min_wait = {{taskset.user.min_wait}}
    max_wait = {{taskset.user.max_wait}}
    weight = {{taskset.user.weight}}
    task_set = {{taskset.name}}
{%- set counter = counter + 1 -%}
{%- endfor %}
